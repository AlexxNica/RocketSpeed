// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#pragma once

#include "ConfigurationImpl.hpp"
#include "MsgIdImpl.hpp"
#include "PublishStatus.hpp"
#include "RetentionBase.hpp"
#include "SubscriptionRequestImpl.hpp"
#include <cstdint>
#include <memory>
#include <optional>
#include <string>
#include <vector>

namespace rocketspeed { namespace djinni {

class PublishCallbackImpl;
class ReceiveCallbackImpl;
class SubscribeCallbackImpl;

class ClientImpl {
public:
    virtual ~ClientImpl() {}

    static std::shared_ptr<ClientImpl> Open(const ConfigurationImpl & config, const std::string & client_id, const std::shared_ptr<PublishCallbackImpl> & publish_callback, const std::shared_ptr<SubscribeCallbackImpl> & subscribe_callback, const std::shared_ptr<ReceiveCallbackImpl> & receive_callback, const std::optional<std::string> & file_path);

    virtual PublishStatus Publish(int16_t namespace_id, const std::string & topic_name, RetentionBase retention, const std::vector<uint8_t> & data, const std::optional<MsgIdImpl> & message_id) = 0;

    virtual void ListenTopics(const std::vector<SubscriptionRequestImpl> & names) = 0;

    virtual void Acknowledge(int16_t namespace_id, const std::string & topic_name, int64_t sequence_number, const std::vector<uint8_t> & contents) = 0;

    virtual void Close() = 0;
};

} }  // namespace rocketspeed::djinni
