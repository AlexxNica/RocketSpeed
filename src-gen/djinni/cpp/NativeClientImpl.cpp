// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#include "src-gen/djinni/cpp/NativeClientImpl.hpp"  // my header
#include "Marshal.hpp"
#include "src-gen/djinni/cpp/NativeClientImpl.hpp"
#include "src-gen/djinni/cpp/NativeHostId.hpp"
#include "src-gen/djinni/cpp/NativeLogLevel.hpp"
#include "src-gen/djinni/cpp/NativeMessageReceivedCallback.hpp"
#include "src-gen/djinni/cpp/NativeMsgId.hpp"
#include "src-gen/djinni/cpp/NativePublishCallback.hpp"
#include "src-gen/djinni/cpp/NativeSnapshotCallback.hpp"
#include "src-gen/djinni/cpp/NativeSubscribeCallback.hpp"
#include "src-gen/djinni/cpp/NativeSubscriptionParameters.hpp"
#include "src-gen/djinni/cpp/NativeSubscriptionStorage.hpp"

namespace djinni_generated {

NativeClientImpl::NativeClientImpl() : ::djinni::JniInterface<::rocketspeed::djinni::ClientImpl, NativeClientImpl>("org/rocketspeed/ClientImpl$CppProxy") {}

NativeClientImpl::~NativeClientImpl() = default;


CJNIEXPORT void JNICALL Java_org_rocketspeed_ClientImpl_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::rocketspeed::djinni::ClientImpl>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_org_rocketspeed_ClientImpl_create(JNIEnv* jniEnv, jobject /*this*/, jobject j_logLevel, jobject j_cockpit, jobject j_storage)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::rocketspeed::djinni::ClientImpl::Create(::djinni_generated::NativeLogLevel::toCpp(jniEnv, j_logLevel),
                                                           ::djinni_generated::NativeHostId::toCpp(jniEnv, j_cockpit),
                                                           ::djinni_generated::NativeSubscriptionStorage::toCpp(jniEnv, j_storage));
        return ::djinni_generated::NativeClientImpl::fromCpp(jniEnv, r).release();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_org_rocketspeed_ClientImpl_00024CppProxy_native_1publish(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_tenantId, jstring j_namespaceId, jstring j_topicName, jbyteArray j_data, jobject j_publishCb, jobject j_messageId)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::ClientImpl>::get(nativeRef);
        auto r = ref->Publish(::djinni::I32::toCpp(jniEnv, j_tenantId),
                              ::djinni::String::toCpp(jniEnv, j_namespaceId),
                              ::djinni::String::toCpp(jniEnv, j_topicName),
                              ::djinni::Binary::toCpp(jniEnv, j_data),
                              ::djinni_generated::NativePublishCallback::toCpp(jniEnv, j_publishCb),
                              ::djinni_generated::NativeMsgId::toCpp(jniEnv, j_messageId));
        return ::djinni_generated::NativeMsgId::fromCpp(jniEnv, r).release();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jlong JNICALL Java_org_rocketspeed_ClientImpl_00024CppProxy_native_1subscribe(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_tenantId, jstring j_namespaceId, jstring j_topicName, jlong j_startSeqno, jobject j_deliverCb, jobject j_subscribeCb)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::ClientImpl>::get(nativeRef);
        auto r = ref->Subscribe(::djinni::I32::toCpp(jniEnv, j_tenantId),
                                ::djinni::String::toCpp(jniEnv, j_namespaceId),
                                ::djinni::String::toCpp(jniEnv, j_topicName),
                                ::djinni::I64::toCpp(jniEnv, j_startSeqno),
                                ::djinni_generated::NativeMessageReceivedCallback::toCpp(jniEnv, j_deliverCb),
                                ::djinni_generated::NativeSubscribeCallback::toCpp(jniEnv, j_subscribeCb));
        return ::djinni::I64::fromCpp(jniEnv, r);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jlong JNICALL Java_org_rocketspeed_ClientImpl_00024CppProxy_native_1resubscribe(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_params, jobject j_deliverCb, jobject j_subscribeCb)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::ClientImpl>::get(nativeRef);
        auto r = ref->Resubscribe(::djinni_generated::NativeSubscriptionParameters::toCpp(jniEnv, j_params),
                                  ::djinni_generated::NativeMessageReceivedCallback::toCpp(jniEnv, j_deliverCb),
                                  ::djinni_generated::NativeSubscribeCallback::toCpp(jniEnv, j_subscribeCb));
        return ::djinni::I64::fromCpp(jniEnv, r);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_org_rocketspeed_ClientImpl_00024CppProxy_native_1unsubscribe(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jlong j_subHandle)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::ClientImpl>::get(nativeRef);
        ref->Unsubscribe(::djinni::I64::toCpp(jniEnv, j_subHandle));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_org_rocketspeed_ClientImpl_00024CppProxy_native_1acknowledge(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jlong j_subHandle, jlong j_seqno)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::ClientImpl>::get(nativeRef);
        ref->Acknowledge(::djinni::I64::toCpp(jniEnv, j_subHandle),
                         ::djinni::I64::toCpp(jniEnv, j_seqno));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_org_rocketspeed_ClientImpl_00024CppProxy_native_1saveSubscriptions(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_snapshotCb)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::ClientImpl>::get(nativeRef);
        ref->SaveSubscriptions(::djinni_generated::NativeSnapshotCallback::toCpp(jniEnv, j_snapshotCb));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_org_rocketspeed_ClientImpl_00024CppProxy_native_1restoreSubscriptions(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::ClientImpl>::get(nativeRef);
        auto r = ref->RestoreSubscriptions();
        return ::djinni::List<::djinni_generated::NativeSubscriptionParameters>::fromCpp(jniEnv, r).release();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_org_rocketspeed_ClientImpl_00024CppProxy_native_1close(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::ClientImpl>::get(nativeRef);
        ref->Close();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
