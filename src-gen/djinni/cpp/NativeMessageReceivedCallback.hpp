// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#pragma once

#include "djinni_support.hpp"
#include "src-gen/djinni/cpp/MessageReceivedCallback.hpp"

namespace djinni_generated {

class NativeMessageReceivedCallback final : ::djinni::JniInterface<::rocketspeed::djinni::MessageReceivedCallback, NativeMessageReceivedCallback> {
public:
    using CppType = std::shared_ptr<::rocketspeed::djinni::MessageReceivedCallback>;
    using JniType = jobject;

    using Boxed = NativeMessageReceivedCallback;

    ~NativeMessageReceivedCallback();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeMessageReceivedCallback>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return {jniEnv, ::djinni::JniClass<NativeMessageReceivedCallback>::get()._toJava(jniEnv, c)}; }

private:
    NativeMessageReceivedCallback();
    friend ::djinni::JniClass<NativeMessageReceivedCallback>;
    friend ::djinni::JniInterface<::rocketspeed::djinni::MessageReceivedCallback, NativeMessageReceivedCallback>;

    class JavaProxy final : ::djinni::JavaProxyCacheEntry, public ::rocketspeed::djinni::MessageReceivedCallback
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void Call(int64_t sub_handle, int64_t start_seqno, std::vector<uint8_t> contents) override;

    private:
        using ::djinni::JavaProxyCacheEntry::getGlobalRef;
        friend ::djinni::JniInterface<::rocketspeed::djinni::MessageReceivedCallback, ::djinni_generated::NativeMessageReceivedCallback>;
        friend ::djinni::JavaProxyCache<JavaProxy>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("org/rocketspeed/MessageReceivedCallback") };
    const jmethodID method_call { ::djinni::jniGetMethodID(clazz.get(), "call", "(JJ[B)V") };
};

}  // namespace djinni_generated
