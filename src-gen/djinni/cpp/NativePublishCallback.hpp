// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#pragma once

#include "djinni_support.hpp"
#include "src-gen/djinni/cpp/PublishCallback.hpp"

namespace djinni_generated {

class NativePublishCallback final : ::djinni::JniInterface<::rocketspeed::djinni::PublishCallback, NativePublishCallback> {
public:
    using CppType = std::shared_ptr<::rocketspeed::djinni::PublishCallback>;
    using JniType = jobject;

    using Boxed = NativePublishCallback;

    ~NativePublishCallback();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativePublishCallback>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return {jniEnv, ::djinni::JniClass<NativePublishCallback>::get()._toJava(jniEnv, c)}; }

private:
    NativePublishCallback();
    friend ::djinni::JniClass<NativePublishCallback>;
    friend ::djinni::JniInterface<::rocketspeed::djinni::PublishCallback, NativePublishCallback>;

    class JavaProxy final : ::djinni::JavaProxyCacheEntry, public ::rocketspeed::djinni::PublishCallback
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void Call(::rocketspeed::djinni::MsgId message_id, std::string namespace_id, std::string topic_name, int64_t seqno, ::rocketspeed::djinni::Status status) override;

    private:
        using ::djinni::JavaProxyCacheEntry::getGlobalRef;
        friend ::djinni::JniInterface<::rocketspeed::djinni::PublishCallback, ::djinni_generated::NativePublishCallback>;
        friend ::djinni::JavaProxyCache<JavaProxy>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("org/rocketspeed/PublishCallback") };
    const jmethodID method_call { ::djinni::jniGetMethodID(clazz.get(), "call", "(Lorg/rocketspeed/MsgId;Ljava/lang/String;Ljava/lang/String;JLorg/rocketspeed/Status;)V") };
};

}  // namespace djinni_generated
