// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#include "src-gen/djinni/cpp/NativeRocketeerServerImpl.hpp"  // my header
#include "Marshal.hpp"
#include "src-gen/djinni/cpp/NativeInboundID.hpp"
#include "src-gen/djinni/cpp/NativeLogLevel.hpp"
#include "src-gen/djinni/cpp/NativeRocketeer.hpp"
#include "src-gen/djinni/cpp/NativeRocketeerServerImpl.hpp"
#include "src-gen/djinni/cpp/NativeStatus.hpp"

namespace djinni_generated {

NativeRocketeerServerImpl::NativeRocketeerServerImpl() : ::djinni::JniInterface<::rocketspeed::djinni::RocketeerServerImpl, NativeRocketeerServerImpl>("org/rocketspeed/RocketeerServerImpl$CppProxy") {}

NativeRocketeerServerImpl::~NativeRocketeerServerImpl() = default;


CJNIEXPORT void JNICALL Java_org_rocketspeed_RocketeerServerImpl_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::rocketspeed::djinni::RocketeerServerImpl>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_org_rocketspeed_RocketeerServerImpl_create(JNIEnv* jniEnv, jobject /*this*/, jobject j_logLevel, jint j_listenerPort)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::rocketspeed::djinni::RocketeerServerImpl::Create(::djinni_generated::NativeLogLevel::toCpp(jniEnv, j_logLevel),
                                                                    ::djinni::I32::toCpp(jniEnv, j_listenerPort));
        return ::djinni_generated::NativeRocketeerServerImpl::fromCpp(jniEnv, r).release();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_org_rocketspeed_RocketeerServerImpl_00024CppProxy_native_1register(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_rocketeer)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::RocketeerServerImpl>::get(nativeRef);
        ref->Register(::djinni_generated::NativeRocketeer::toCpp(jniEnv, j_rocketeer));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_org_rocketspeed_RocketeerServerImpl_00024CppProxy_native_1start(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::RocketeerServerImpl>::get(nativeRef);
        auto r = ref->Start();
        return ::djinni_generated::NativeStatus::fromCpp(jniEnv, r).release();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_org_rocketspeed_RocketeerServerImpl_00024CppProxy_native_1deliver(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_inboundId, jlong j_seqno, jbyteArray j_payload)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::RocketeerServerImpl>::get(nativeRef);
        auto r = ref->Deliver(::djinni_generated::NativeInboundID::toCpp(jniEnv, j_inboundId),
                              ::djinni::I64::toCpp(jniEnv, j_seqno),
                              ::djinni::Binary::toCpp(jniEnv, j_payload));
        return ::djinni::Bool::fromCpp(jniEnv, r);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_org_rocketspeed_RocketeerServerImpl_00024CppProxy_native_1terminate(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_inboundId)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::RocketeerServerImpl>::get(nativeRef);
        auto r = ref->Terminate(::djinni_generated::NativeInboundID::toCpp(jniEnv, j_inboundId));
        return ::djinni::Bool::fromCpp(jniEnv, r);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_org_rocketspeed_RocketeerServerImpl_00024CppProxy_native_1close(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::CppProxyHandle<::rocketspeed::djinni::RocketeerServerImpl>::get(nativeRef);
        ref->Close();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
