// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#pragma once

#include "djinni_support.hpp"
#include "src-gen/djinni/cpp/DisconnectCallback.hpp"

namespace djinni_generated {

class NativeDisconnectCallback final : djinni::JniInterface<::rocketspeed::djinni::DisconnectCallback, NativeDisconnectCallback> {
public:
    using CppType = std::shared_ptr<::rocketspeed::djinni::DisconnectCallback>;
    using JniType = jobject;

    static jobject toJava(JNIEnv* jniEnv, std::shared_ptr<::rocketspeed::djinni::DisconnectCallback> c) { return djinni::JniClass<::djinni_generated::NativeDisconnectCallback>::get()._toJava(jniEnv, c); }
    static std::shared_ptr<::rocketspeed::djinni::DisconnectCallback> fromJava(JNIEnv* jniEnv, jobject j) { return djinni::JniClass<::djinni_generated::NativeDisconnectCallback>::get()._fromJava(jniEnv, j); }

    const djinni::GlobalRef<jclass> clazz { djinni::jniFindClass("org/rocketspeed/DisconnectCallback") };
    const jmethodID method_call { djinni::jniGetMethodID(clazz.get(), "call", "(Ljava/util/ArrayList;)V") };

    class JavaProxy final : djinni::JavaProxyCacheEntry, public ::rocketspeed::djinni::DisconnectCallback {
    public:
        JavaProxy(jobject obj);
        virtual void Call(std::vector<std::string> client_ids) override;

    private:
        using djinni::JavaProxyCacheEntry::getGlobalRef;
        friend class djinni::JniInterface<::rocketspeed::djinni::DisconnectCallback, ::djinni_generated::NativeDisconnectCallback>;
        friend class djinni::JavaProxyCache<JavaProxy>;
    };

private:
    NativeDisconnectCallback();
    friend class djinni::JniClass<::djinni_generated::NativeDisconnectCallback>;
};

}  // namespace djinni_generated
