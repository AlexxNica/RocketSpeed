// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#pragma once

#include "djinni_support.hpp"
#include "src-gen/djinni/cpp/MessageCallback.hpp"

namespace djinni_generated {

class NativeMessageCallback final : djinni::JniInterface<::rocketspeed::djinni::MessageCallback, NativeMessageCallback> {
public:
    using CppType = std::shared_ptr<::rocketspeed::djinni::MessageCallback>;
    using JniType = jobject;

    static jobject toJava(JNIEnv* jniEnv, std::shared_ptr<::rocketspeed::djinni::MessageCallback> c) { return djinni::JniClass<::djinni_generated::NativeMessageCallback>::get()._toJava(jniEnv, c); }
    static std::shared_ptr<::rocketspeed::djinni::MessageCallback> fromJava(JNIEnv* jniEnv, jobject j) { return djinni::JniClass<::djinni_generated::NativeMessageCallback>::get()._fromJava(jniEnv, j); }

    const djinni::GlobalRef<jclass> clazz { djinni::jniFindClass("org/rocketspeed/MessageCallback") };
    const jmethodID method_call { djinni::jniGetMethodID(clazz.get(), "call", "(Ljava/lang/String;[B)V") };

    class JavaProxy final : djinni::JavaProxyCacheEntry, public ::rocketspeed::djinni::MessageCallback {
    public:
        JavaProxy(jobject obj);
        virtual void Call(std::string client_id, std::vector<uint8_t> message) override;

    private:
        using djinni::JavaProxyCacheEntry::getGlobalRef;
        friend class djinni::JniInterface<::rocketspeed::djinni::MessageCallback, ::djinni_generated::NativeMessageCallback>;
        friend class djinni::JavaProxyCache<JavaProxy>;
    };

private:
    NativeMessageCallback();
    friend class djinni::JniClass<::djinni_generated::NativeMessageCallback>;
};

}  // namespace djinni_generated
