// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#include "src-gen/djinni/cpp/jni/NativeProxyImpl.hpp"  // my header
#include "HBinary.hpp"
#include "HI32.hpp"
#include "HI64.hpp"
#include "src-gen/djinni/cpp/jni/NativeConfigurationImpl.hpp"
#include "src-gen/djinni/cpp/jni/NativeDisconnectCallback.hpp"
#include "src-gen/djinni/cpp/jni/NativeLogLevel.hpp"
#include "src-gen/djinni/cpp/jni/NativeMessageCallback.hpp"
#include "src-gen/djinni/cpp/jni/NativeProxyImpl.hpp"
#include "src-gen/djinni/cpp/jni/NativeStatus.hpp"

namespace djinni_generated {

NativeProxyImpl::NativeProxyImpl() : djinni::JniInterface<::rocketspeed::djinni::ProxyImpl, NativeProxyImpl>("org/rocketspeed/ProxyImpl$CppProxy") {}

using namespace ::djinni_generated;

CJNIEXPORT void JNICALL Java_org_rocketspeed_ProxyImpl_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::rocketspeed::djinni::ProxyImpl>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_org_rocketspeed_ProxyImpl_create(JNIEnv* jniEnv, jobject /*this*/, jobject j_logLevel, jobject j_config, jint j_numWorkers)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        ::rocketspeed::djinni::LogLevel c_log_level = NativeLogLevel::fromJava(jniEnv, j_logLevel);
        ::rocketspeed::djinni::ConfigurationImpl c_config = NativeConfigurationImpl::fromJava(jniEnv, j_config);
        int32_t c_num_workers = ::djinni::HI32::Unboxed::fromJava(jniEnv, j_numWorkers);

        std::shared_ptr<::rocketspeed::djinni::ProxyImpl> cr = ::rocketspeed::djinni::ProxyImpl::Create(std::move(c_log_level), std::move(c_config), std::move(c_num_workers));

        return NativeProxyImpl::toJava(jniEnv, cr);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0  /* value doesn't matter */ )
}

CJNIEXPORT jobject JNICALL Java_org_rocketspeed_ProxyImpl_00024CppProxy_native_1start(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_messageCallback, jobject j_disconnectCallback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const std::shared_ptr<::rocketspeed::djinni::ProxyImpl> & ref = djinni::CppProxyHandle<::rocketspeed::djinni::ProxyImpl>::get(nativeRef);
        std::shared_ptr<::rocketspeed::djinni::MessageCallback> c_message_callback = NativeMessageCallback::fromJava(jniEnv, j_messageCallback);
        std::shared_ptr<::rocketspeed::djinni::DisconnectCallback> c_disconnect_callback = NativeDisconnectCallback::fromJava(jniEnv, j_disconnectCallback);

        ::rocketspeed::djinni::Status cr = ref->Start(std::move(c_message_callback), std::move(c_disconnect_callback));

        return NativeStatus::toJava(jniEnv, cr);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter*/)
}

CJNIEXPORT void JNICALL Java_org_rocketspeed_ProxyImpl_00024CppProxy_native_1forward(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jbyteArray j_message, jlong j_session, jint j_sequence)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const std::shared_ptr<::rocketspeed::djinni::ProxyImpl> & ref = djinni::CppProxyHandle<::rocketspeed::djinni::ProxyImpl>::get(nativeRef);
        std::vector<uint8_t> c_message = ::djinni::HBinary::fromJava(jniEnv, j_message);
        int64_t c_session = ::djinni::HI64::Unboxed::fromJava(jniEnv, j_session);
        int32_t c_sequence = ::djinni::HI32::Unboxed::fromJava(jniEnv, j_sequence);

        ref->Forward(std::move(c_message), std::move(c_session), std::move(c_sequence));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_org_rocketspeed_ProxyImpl_00024CppProxy_native_1destroySession(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jlong j_session)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const std::shared_ptr<::rocketspeed::djinni::ProxyImpl> & ref = djinni::CppProxyHandle<::rocketspeed::djinni::ProxyImpl>::get(nativeRef);
        int64_t c_session = ::djinni::HI64::Unboxed::fromJava(jniEnv, j_session);

        ref->DestroySession(std::move(c_session));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_org_rocketspeed_ProxyImpl_00024CppProxy_native_1close(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const std::shared_ptr<::rocketspeed::djinni::ProxyImpl> & ref = djinni::CppProxyHandle<::rocketspeed::djinni::ProxyImpl>::get(nativeRef);

        ref->Close();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
