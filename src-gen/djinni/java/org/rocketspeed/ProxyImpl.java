// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

package org.rocketspeed;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class ProxyImpl {
    public abstract Status start(MessageCallback messageCallback, DisconnectCallback disconnectCallback);

    public abstract Status forward(byte[] message, long session);

    public abstract void destroySession(long session);

    public abstract void close();

    public static native ProxyImpl create(LogLevel logLevel, ConfigurationImpl config, int numWorkers);

    public static final class CppProxy extends ProxyImpl
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public Status start(MessageCallback messageCallback, DisconnectCallback disconnectCallback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_start(this.nativeRef, messageCallback, disconnectCallback);
        }
        private native Status native_start(long _nativeRef, MessageCallback messageCallback, DisconnectCallback disconnectCallback);

        @Override
        public Status forward(byte[] message, long session)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_forward(this.nativeRef, message, session);
        }
        private native Status native_forward(long _nativeRef, byte[] message, long session);

        @Override
        public void destroySession(long session)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_destroySession(this.nativeRef, session);
        }
        private native void native_destroySession(long _nativeRef, long session);

        @Override
        public void close()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_close(this.nativeRef);
        }
        private native void native_close(long _nativeRef);
    }
}
