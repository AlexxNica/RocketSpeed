// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

package org.rocketspeed;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class RocketeerServerImpl {
    public abstract void register(Rocketeer rocketeer);

    public abstract Status start();

    public abstract boolean deliver(InboundID inboundId, long seqno, byte[] payload);

    public abstract boolean terminate(InboundID inboundId);

    public abstract void close();

    public static native RocketeerServerImpl create(LogLevel logLevel, int listenerPort);

    public static final class CppProxy extends RocketeerServerImpl
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void register(Rocketeer rocketeer)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_register(this.nativeRef, rocketeer);
        }
        private native void native_register(long _nativeRef, Rocketeer rocketeer);

        @Override
        public Status start()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_start(this.nativeRef);
        }
        private native Status native_start(long _nativeRef);

        @Override
        public boolean deliver(InboundID inboundId, long seqno, byte[] payload)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_deliver(this.nativeRef, inboundId, seqno, payload);
        }
        private native boolean native_deliver(long _nativeRef, InboundID inboundId, long seqno, byte[] payload);

        @Override
        public boolean terminate(InboundID inboundId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_terminate(this.nativeRef, inboundId);
        }
        private native boolean native_terminate(long _nativeRef, InboundID inboundId);

        @Override
        public void close()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_close(this.nativeRef);
        }
        private native void native_close(long _nativeRef);
    }
}
