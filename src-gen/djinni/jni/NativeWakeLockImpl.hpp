// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#pragma once

#include "WakeLockImpl.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeWakeLockImpl final : djinni::JniInterface<::rocketspeed::djinni::WakeLockImpl, NativeWakeLockImpl> {
public:
    using CppType = std::shared_ptr<::rocketspeed::djinni::WakeLockImpl>;
    using JniType = jobject;

    static jobject toJava(JNIEnv* jniEnv, std::shared_ptr<::rocketspeed::djinni::WakeLockImpl> c) { return djinni::JniClass<::djinni_generated::NativeWakeLockImpl>::get()._toJava(jniEnv, c); }
    static std::shared_ptr<::rocketspeed::djinni::WakeLockImpl> fromJava(JNIEnv* jniEnv, jobject j) { return djinni::JniClass<::djinni_generated::NativeWakeLockImpl>::get()._fromJava(jniEnv, j); }

    const djinni::GlobalRef<jclass> clazz { djinni::jniFindClass("org/rocketspeed/WakeLockImpl") };
    const jmethodID method_Acquire { djinni::jniGetMethodID(clazz.get(), "Acquire", "(J)V") };
    const jmethodID method_Release { djinni::jniGetMethodID(clazz.get(), "Release", "()V") };

    class JavaProxy final : djinni::JavaProxyCacheEntry, public ::rocketspeed::djinni::WakeLockImpl {
    public:
        JavaProxy(jobject obj);
        virtual void Acquire(int64_t timeout) override;
        virtual void Release() override;

    private:
        using djinni::JavaProxyCacheEntry::getGlobalRef;
        friend class djinni::JniInterface<::rocketspeed::djinni::WakeLockImpl, ::djinni_generated::NativeWakeLockImpl>;
        friend class djinni::JavaProxyCache<JavaProxy>;
    };

private:
    NativeWakeLockImpl();
    friend class djinni::JniClass<::djinni_generated::NativeWakeLockImpl>;
};

}  // namespace djinni_generated
