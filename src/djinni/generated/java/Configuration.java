// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

package org.rocketspeed;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 *
 * Specify a configuration that describes the RocketSpeed instance
 * Created in C++ and used by Java and ObjC
 *
 */
public abstract class Configuration {
    public abstract ArrayList<HostId> GetPilotHostIds();

    public abstract ArrayList<HostId> GetCopilotHostIds();

    public abstract TenantID GetTenantID();

    public static native Configuration CreateNewInstance(ArrayList<HostId> pilots, ArrayList<HostId> copilots, TenantID tenantId);

    public static final class NativeProxy extends Configuration
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private NativeProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public ArrayList<HostId> GetPilotHostIds()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_GetPilotHostIds(this.nativeRef);
        }
        private native ArrayList<HostId> native_GetPilotHostIds(long _nativeRef);

        @Override
        public ArrayList<HostId> GetCopilotHostIds()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_GetCopilotHostIds(this.nativeRef);
        }
        private native ArrayList<HostId> native_GetCopilotHostIds(long _nativeRef);

        @Override
        public TenantID GetTenantID()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_GetTenantID(this.nativeRef);
        }
        private native TenantID native_GetTenantID(long _nativeRef);
    }
}
