// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#include "NativeMessageReceived.hpp"  // my header
#include "HBinary.hpp"
#include "NativeSequenceNumber.hpp"
#include "NativeTopic.hpp"

namespace djinni_generated {

NativeMessageReceived::NativeMessageReceived() : djinni::JniInterfaceCppExt<::rocketglue::MessageReceived>("org/rocketspeed/MessageReceived$NativeProxy") {}

using namespace ::djinni_generated;

CJNIEXPORT void JNICALL Java_org_rocketspeed_MessageReceived_00024NativeProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<std::shared_ptr<::rocketglue::MessageReceived>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_org_rocketspeed_MessageReceived_00024NativeProxy_native_1GetSequenceNumber(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const std::shared_ptr<::rocketglue::MessageReceived> & ref = *reinterpret_cast<const std::shared_ptr<::rocketglue::MessageReceived>*>(nativeRef);

        ::rocketglue::SequenceNumber cr = ref->GetSequenceNumber();

        return NativeSequenceNumber::toJava(jniEnv, cr);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter*/)
}

CJNIEXPORT jobject JNICALL Java_org_rocketspeed_MessageReceived_00024NativeProxy_native_1GetTopicName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const std::shared_ptr<::rocketglue::MessageReceived> & ref = *reinterpret_cast<const std::shared_ptr<::rocketglue::MessageReceived>*>(nativeRef);

        ::rocketglue::Topic cr = ref->GetTopicName();

        return NativeTopic::toJava(jniEnv, cr);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter*/)
}

CJNIEXPORT jbyteArray JNICALL Java_org_rocketspeed_MessageReceived_00024NativeProxy_native_1GetContents(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const std::shared_ptr<::rocketglue::MessageReceived> & ref = *reinterpret_cast<const std::shared_ptr<::rocketglue::MessageReceived>*>(nativeRef);

        std::vector<uint8_t> cr = ref->GetContents();

        return ::djinni::HBinary::toJava(jniEnv, cr);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter*/)
}

}  // namespace djinni_generated
