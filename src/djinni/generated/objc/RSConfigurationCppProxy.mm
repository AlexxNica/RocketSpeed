// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#import "RSConfigurationCppProxy+Private.h"
#import "DJIError.h"
#import "RSConfiguration.h"
#import "RSConfigurationCppProxy+Private.h"
#import "RSHostId+Private.h"
#import "RSTenantID+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@implementation RSConfigurationCppProxy

- (id)initWithCpp:(const std::shared_ptr<::rocketglue::Configuration> &)cppRef
{
    if (self = [super init]) {
        _cppRef = cppRef;
    }
    return self;
}

- (void)dealloc
{
    djinni::DbxCppWrapperCache<::rocketglue::Configuration> & cache = djinni::DbxCppWrapperCache<::rocketglue::Configuration>::getInstance();
    cache.remove(_cppRef);
}

+ (id)ConfigurationWithCpp:(const std::shared_ptr<::rocketglue::Configuration> &)cppRef
{
    djinni::DbxCppWrapperCache<::rocketglue::Configuration> & cache = djinni::DbxCppWrapperCache<::rocketglue::Configuration>::getInstance();
    return cache.get(cppRef, [] (const std::shared_ptr<::rocketglue::Configuration> & p) { return [[RSConfigurationCppProxy alloc] initWithCpp:p]; });
}

+ (id <RSConfiguration>)CreateNewInstance:(NSMutableArray *)pilots copilots:(NSMutableArray *)copilots tenantId:(RSTenantID *)tenantId port:(int32_t)port {
    try {
        std::vector<::rocketglue::HostId> cppPilots;
        cppPilots.reserve([pilots count]);
        for (RSHostId *objcValue_0 in pilots) {
            ::rocketglue::HostId cppValue_0 = std::move([objcValue_0 cppHostId]);
            cppPilots.push_back(std::move(cppValue_0));
        }
        std::vector<::rocketglue::HostId> cppCopilots;
        cppCopilots.reserve([copilots count]);
        for (RSHostId *objcValue_0 in copilots) {
            ::rocketglue::HostId cppValue_0 = std::move([objcValue_0 cppHostId]);
            cppCopilots.push_back(std::move(cppValue_0));
        }
        ::rocketglue::TenantID cppTenantId = std::move([tenantId cppTenantID]);
        int32_t cppPort = port;
        std::shared_ptr<::rocketglue::Configuration> cppRet = ::rocketglue::Configuration::CreateNewInstance(std::move(cppPilots), std::move(cppCopilots), std::move(cppTenantId), std::move(cppPort));
        id <RSConfiguration> objcRet = [RSConfigurationCppProxy ConfigurationWithCpp:cppRet];
        return objcRet;
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NSMutableArray *)GetPilotHostIds {
    try {
        std::vector<::rocketglue::HostId> cppRet = _cppRef->GetPilotHostIds();
        NSMutableArray *objcRet = [NSMutableArray arrayWithCapacity:cppRet.size()];
        for (const auto & cppValue_0 : cppRet) {
            RSHostId *objcValue_0 = [[RSHostId alloc] initWithCppHostId:cppValue_0];
            [objcRet addObject:objcValue_0];
        }
        return objcRet;
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NSMutableArray *)GetCopilotHostIds {
    try {
        std::vector<::rocketglue::HostId> cppRet = _cppRef->GetCopilotHostIds();
        NSMutableArray *objcRet = [NSMutableArray arrayWithCapacity:cppRet.size()];
        for (const auto & cppValue_0 : cppRet) {
            RSHostId *objcValue_0 = [[RSHostId alloc] initWithCppHostId:cppValue_0];
            [objcRet addObject:objcValue_0];
        }
        return objcRet;
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (RSTenantID *)GetTenantID {
    try {
        ::rocketglue::TenantID cppRet = _cppRef->GetTenantID();
        RSTenantID *objcRet = [[RSTenantID alloc] initWithCppTenantID:cppRet];
        return objcRet;
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)GetClientPort {
    try {
        int32_t cppRet = _cppRef->GetClientPort();
        int32_t objcRet = cppRet;
        return objcRet;
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

@end
