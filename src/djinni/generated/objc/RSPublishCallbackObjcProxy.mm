// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#import "RSPublishCallbackObjcProxy+Private.h"
#import "RSPublishCallback.h"
#import "RSResultStatus+Private.h"

namespace rocketglue
{
    PublishCallbackObjcProxy::PublishCallbackObjcProxy (id objcRef)
    {
        assert([[objcRef class] conformsToProtocol:@protocol(RSPublishCallback)]);
        this->objcRef = objcRef;
    }

    PublishCallbackObjcProxy::~PublishCallbackObjcProxy ()
    {
        djinni::DbxObjcWrapperCache<PublishCallbackObjcProxy> & cache = djinni::DbxObjcWrapperCache<PublishCallbackObjcProxy>::getInstance();
        cache.remove(objcRef);
    }

    std::shared_ptr<::rocketglue::PublishCallback> PublishCallbackObjcProxy::PublishCallback_with_objc (id objcRef)
    {
        djinni::DbxObjcWrapperCache<PublishCallbackObjcProxy> & cache = djinni::DbxObjcWrapperCache<PublishCallbackObjcProxy>::getInstance();
        return static_cast<std::shared_ptr<::rocketglue::PublishCallback>>(cache.get(objcRef));
    }

    void PublishCallbackObjcProxy::Call (const ::rocketglue::ResultStatus & result_status)
    {
        RSResultStatus *cpp_result_status = [[RSResultStatus alloc] initWithCppResultStatus:result_status];
        [objcRef Call:cpp_result_status];
    }
}
