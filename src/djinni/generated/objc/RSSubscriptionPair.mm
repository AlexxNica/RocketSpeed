// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

#import "RSSubscriptionPair+Private.h"
#import "RSNamespaceID+Private.h"
#import "RSSequenceNumber+Private.h"
#import "RSTopic+Private.h"
#import <Foundation/Foundation.h>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@implementation RSSubscriptionPair

- (id)initWithSubscriptionPair:(RSSubscriptionPair *)SubscriptionPair
{
    if (self = [super init]) {
        _seqno = [[RSSequenceNumber alloc] initWithSequenceNumber:SubscriptionPair.seqno];
        _topicName = [[RSTopic alloc] initWithTopic:SubscriptionPair.topicName];
        _namespaceId = [[RSNamespaceID alloc] initWithNamespaceID:SubscriptionPair.namespaceId];
    }
    return self;
}

- (id)initWithSeqno:(RSSequenceNumber *)seqno topicName:(RSTopic *)topicName namespaceId:(RSNamespaceID *)namespaceId
{
    if (self = [super init]) {
        _seqno = seqno;
        _topicName = topicName;
        _namespaceId = namespaceId;
    }
    return self;
}

- (id)initWithCppSubscriptionPair:(const ::rocketglue::SubscriptionPair &)SubscriptionPair
{
    if (self = [super init]) {
        _seqno = [[RSSequenceNumber alloc] initWithCppSequenceNumber:SubscriptionPair.seqno];
        _topicName = [[RSTopic alloc] initWithCppTopic:SubscriptionPair.topic_name];
        _namespaceId = [[RSNamespaceID alloc] initWithCppNamespaceID:SubscriptionPair.namespace_id];
    }
    return self;
}

- (::rocketglue::SubscriptionPair)cppSubscriptionPair
{
    ::rocketglue::SequenceNumber seqno = std::move([_seqno cppSequenceNumber]);
    ::rocketglue::Topic topicName = std::move([_topicName cppTopic]);
    ::rocketglue::NamespaceID namespaceId = std::move([_namespaceId cppNamespaceID]);
    return ::rocketglue::SubscriptionPair(
            std::move(seqno),
            std::move(topicName),
            std::move(namespaceId));
}

@end
