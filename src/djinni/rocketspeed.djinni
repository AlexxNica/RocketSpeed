StatusCode = enum {
  Ok;
  NotFound;
  NotSupported;
  InvalidArgument;
  IOError;
  NotInitialized;
  Internal;
  Unauthorized;
  TimedOut;
}

Status = record +j {
  code: StatusCode;
  state: string;
}

LogLevel = enum {
  DEBUG_LEVEL;
  INFO_LEVEL;
  WARN_LEVEL;
  ERROR_LEVEL;
  FATAL_LEVEL;
  VITAL_LEVEL;
  NONE_LEVEL;
  NUM_INFO_LOG_LEVELS;
}

HostId = record {
  host: string;
  port: i32;
} deriving (eq)

StorageType = enum {
  None;
  File;
}

SubscriptionStorage = record {
  type: StorageType;
  # Used only when this is a file storage.
  file_path: string;
}

MsgId = record +j {
  hi: i64;
  lo: i64;
} deriving (eq)

PublishCallback = interface +j +o {
  call(message_id: MsgId,
       namespace_id: string,
       topic_name: string,
       seqno: i64,
       status: Status);
}

MessageReceivedCallback = interface +j +o {
  call(sub_handle: i64,
       start_seqno: i64,
       contents: binary);
}

SubscribeCallback = interface +j +o {
  call(tenant_id: i32,
       namespace_id: string,
       topic_name: string,
       start_seqno: i64,
       subscribed: bool,
       status: Status);
}

SnapshotCallback = interface +j +o {
  call(status: Status);
}

SubscriptionParameters = record {
  tenant_id: i32;
  namespace_id: string;
  topic_name: string;
  start_seqno: i64;
} deriving (eq)

ClientImpl = interface +c {

  static create(log_level: LogLevel,
                cockpit: HostId,
                storage: SubscriptionStorage): ClientImpl;

  publish(tenant_id: i32,
          namespace_id: string,
          topic_name: string,
          data: binary,
          publish_cb: PublishCallback,
          message_id: MsgId): MsgId;

  subscribe(tenant_id: i32,
            namespace_id: string,
            topic_name: string,
            start_seqno: i64,
            deliver_cb: MessageReceivedCallback,
            subscribe_cb: SubscribeCallback): i64;

  resubscribe(params: SubscriptionParameters,
              deliver_cb: MessageReceivedCallback,
              subscribe_cb: SubscribeCallback): i64;

  unsubscribe(sub_handle: i64);

  acknowledge(sub_handle: i64,
              seqno: i64);

  saveSubscriptions(snapshot_cb: SnapshotCallback);

  restoreSubscriptions(): list<SubscriptionParameters>;

  close();
}

InboundID = record {
  serialised: binary;
} deriving (eq)

Rocketeer = interface +j +o {

  handleNewSubscription(inbound_id: InboundID,
                        params: SubscriptionParameters);

  handleTermination(inbound_id: InboundID);
}

RocketeerServerImpl = interface +c {

  static create(log_level: LogLevel,
                listener_port: i32): RocketeerServerImpl;

  register(rocketeer: Rocketeer);

  start(): Status;

  deliver(inbound_id: InboundID,
          seqno: i64,
          payload: binary): bool;

  terminate(inbound_id: InboundID): bool;

  close();
}
