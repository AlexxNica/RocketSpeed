// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from rocketspeed.djinni

package org.rocketspeed;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class ClientImpl {
    public abstract Status Start(boolean restoreSubscriptions, boolean resubscribeFromStorage);

    public abstract PublishStatus Publish(int namespaceId, String topicName, RetentionBase retention, byte[] data, MsgIdImpl messageId, PublishCallbackImpl publishCallback);

    public abstract void ListenTopics(ArrayList<SubscriptionRequestImpl> names);

    public abstract void Acknowledge(int namespaceId, String topicName, long sequenceNumber);

    public abstract void SaveSubscriptions(SnapshotCallbackImpl snapshotCallback);

    public abstract void Close();

    public static native ClientImpl Open(ConfigurationImpl config, int tenantId, String clientId, SubscribeCallbackImpl subscribeCallback, ReceiveCallbackImpl receiveCallback, SubscriptionStorage storage, WakeLockImpl wakeLock);

    public static final class CppProxy extends ClientImpl
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public Status Start(boolean restoreSubscriptions, boolean resubscribeFromStorage)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_Start(this.nativeRef, restoreSubscriptions, resubscribeFromStorage);
        }
        private native Status native_Start(long _nativeRef, boolean restoreSubscriptions, boolean resubscribeFromStorage);

        @Override
        public PublishStatus Publish(int namespaceId, String topicName, RetentionBase retention, byte[] data, MsgIdImpl messageId, PublishCallbackImpl publishCallback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_Publish(this.nativeRef, namespaceId, topicName, retention, data, messageId, publishCallback);
        }
        private native PublishStatus native_Publish(long _nativeRef, int namespaceId, String topicName, RetentionBase retention, byte[] data, MsgIdImpl messageId, PublishCallbackImpl publishCallback);

        @Override
        public void ListenTopics(ArrayList<SubscriptionRequestImpl> names)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_ListenTopics(this.nativeRef, names);
        }
        private native void native_ListenTopics(long _nativeRef, ArrayList<SubscriptionRequestImpl> names);

        @Override
        public void Acknowledge(int namespaceId, String topicName, long sequenceNumber)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_Acknowledge(this.nativeRef, namespaceId, topicName, sequenceNumber);
        }
        private native void native_Acknowledge(long _nativeRef, int namespaceId, String topicName, long sequenceNumber);

        @Override
        public void SaveSubscriptions(SnapshotCallbackImpl snapshotCallback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_SaveSubscriptions(this.nativeRef, snapshotCallback);
        }
        private native void native_SaveSubscriptions(long _nativeRef, SnapshotCallbackImpl snapshotCallback);

        @Override
        public void Close()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_Close(this.nativeRef);
        }
        private native void native_Close(long _nativeRef);
    }
}
